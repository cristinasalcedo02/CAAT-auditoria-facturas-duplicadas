# CAAT ‚Äì An√°lisis de Facturas Duplicadas

import pandas as pd
import streamlit as st
import hashlib
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# CONFIGURACI√ìN GENERAL
st.set_page_config(page_title="CAAT ‚Äì An√°lisis de Facturas Duplicadas", layout="wide")
st.title("üßæ CAAT ‚Äì An√°lisis de Facturas Duplicadas")

st.markdown("""
Esta aplicaci√≥n es una herramienta de Auditor√≠a Asistida por Computadora (CAAT) dise√±ada para analizar grandes vol√∫menes de datos contenidos en hojas de c√°lculo. Su objetivo principal es detectar **facturas duplicadas** mediante t√©cnicas automatizadas de comparaci√≥n, validaci√≥n e integridad.

Puedes subir un archivo Excel con m√∫ltiples hojas desde el panel lateral izquierdo y seleccionar libremente cu√°les analizar. La herramienta te permitir√°:

- Identificar coincidencias por n√∫mero de factura, fecha, proveedor y monto.
- Verificar la integridad de archivos mediante hash criptogr√°fico.
- Obtener res√∫menes visuales de hallazgos clave.
- Consultar un historial de ejecuciones como evidencia del proceso.

üí° Utiliza esta herramienta para mejorar la eficiencia, trazabilidad y confiabilidad en tus auditor√≠as.
""")

st.warning("Las hojas seleccionadas deben contener las siguientes columnas: numero_factura, fecha, proveedor, monto, usuario_registro")

# SUBIR ARCHIVO EXCEL
archivo = st.sidebar.file_uploader("üìÇ Sube tu archivo .xlsx con los datos", type="xlsx")

if archivo:
    excel = pd.ExcelFile(archivo)
    hojas = excel.sheet_names
    hoja_a = st.sidebar.selectbox("Selecciona la hoja para Archivo A:", hojas)
    hoja_b = st.sidebar.selectbox("Selecciona la hoja para Archivo B:", hojas, index=1 if len(hojas) > 1 else 0)

    df_a = excel.parse(hoja_a)
    df_b = excel.parse(hoja_b)

    columnas_requeridas = {"numero_factura", "fecha", "proveedor", "monto", "usuario_registro"}
    if not columnas_requeridas.issubset(set(df_a.columns)) or not columnas_requeridas.issubset(set(df_b.columns)):
        st.error("‚ùå Las hojas seleccionadas no contienen todas las columnas requeridas.")
    else:
        # HASH DE INTEGRIDAD
        def calcular_hash(df):
            return hashlib.sha256(pd.util.hash_pandas_object(df, index=True).values).hexdigest()

        st.subheader("üîç Verificaci√≥n de integridad de archivos:")
        st.code(f"SHA-256 {hoja_a}: {calcular_hash(df_a)}")
        st.code(f"SHA-256 {hoja_b}: {calcular_hash(df_b)}")

        # AN√ÅLISIS DE DUPLICADOS
        duplicados_factura = df_a[df_a.duplicated(subset=["numero_factura"], keep=False)]
        duplicados_fpm = df_a[df_a.duplicated(subset=["fecha", "proveedor", "monto"], keep=False)]
        duplicados_campos_clave = df_a[df_a.duplicated(subset=["numero_factura", "fecha", "proveedor", "monto"], keep=False)]
        duplicados_entre_archivos = pd.merge(df_a, df_b, on=["numero_factura", "fecha", "proveedor", "monto"])
        validas = df_a[~df_a.index.isin(duplicados_factura.index)]

        st.subheader("üìä Resumen de hallazgos:")
        st.markdown(f"""
- **Duplicados por n√∫mero de factura:** {len(duplicados_factura)} registros  
- **Duplicados por fecha-proveedor-monto:** {len(duplicados_fpm)} registros  
- **Duplicados por campos clave:** {len(duplicados_campos_clave)} registros  
- **Duplicados entre archivos:** {len(duplicados_entre_archivos)} registros  
- **Facturas v√°lidas (no anuladas):** {len(validas)} registros
        """)

        # RANKING DE USUARIOS
        sospechosas = pd.concat([duplicados_factura, duplicados_fpm, duplicados_campos_clave])
        ranking = sospechosas.groupby("usuario_registro").size().reset_index(name="cantidad_duplicados")
        ranking = ranking.sort_values("cantidad_duplicados", ascending=False)

        st.subheader("üèÅ Ranking de usuarios con m√°s facturas sospechosas:")
        st.dataframe(ranking)

        st.subheader("üìâ Visualizaci√≥n del ranking:")
        fig, ax = plt.subplots()
        sns.barplot(data=ranking, y="usuario_registro", x="cantidad_duplicados", ax=ax)
        ax.set_title("Ranking de usuarios con m√°s facturas sospechosas")
        st.pyplot(fig)

        # HISTORIAL DE EJECUCIONES
        fecha = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log = pd.DataFrame([{
            "usuario": "auditor_streamlit",
            "fecha_ejecucion": fecha,
            "Duplicados por n√∫mero de factura": len(duplicados_factura),
            "Duplicados por fecha-proveedor-monto": len(duplicados_fpm),
            "Duplicados por campos clave": len(duplicados_campos_clave),
            "Duplicados entre archivos": len(duplicados_entre_archivos),
            "Facturas v√°lidas": len(validas)
        }])
        st.subheader("üìà Historial de ejecuciones:")
        st.dataframe(log)

        # DESCARGA DE RESULTADO
        csv = sospechosas.to_csv(index=False).encode('utf-8')
        st.download_button("üì§ Exportar resultados en CSV", data=csv, file_name="facturas_sospechosas.csv", mime="text/csv")
else:
    st.info("üì• Por favor, sube un archivo .xlsx desde el panel lateral izquierdo.")
